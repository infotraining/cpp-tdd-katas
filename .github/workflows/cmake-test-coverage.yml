# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
  
      - name: Install dependencies
        if: runner.os == 'Linux'
        run: apt-get install curl zip unzip tar lcov
  
      - name: Setup vcpkg (it does not install any package yet)
        uses: lukka/run-vcpkg@v11
  
      # - name: Create build directory
      #   run: cmake -E make_directory ${{runner.workspace}}/build
  
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_COVERAGE=true
  
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  
      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
  
      - name: Coverage
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build ${{github.workspace}}/build -t coverage
  
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: ${{github.workspace}}/build/coverage.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

    

